/**
 * SimpleNotification - Une alternative tr√®s basique aux notifications natives
 * 
 * Ce module simule des notifications en utilisant des alertes. Il est destin√©
 * √† √™tre utilis√© quand les notifications natives posent probl√®me.
 */
import { Alert, Vibration, Platform } from 'react-native';

// Cache pour les rappels d√©j√† pr√©vus
const reminderCache = new Set();

/**
 * Cr√©er un rappel utilisateur sans utiliser le syst√®me de notification natif
 * 
 * @param {Object} options Options du rappel
 * @param {string} options.title Titre du rappel
 * @param {string} options.message Message du rappel
 * @param {Date} options.date Date et heure du rappel
 * @param {Function} options.onPress Fonction √† appeler quand l'utilisateur appuie sur le rappel
 * @param {string} options.id Identifiant unique du rappel
 * @returns {string} Identifiant du rappel
 */
export const scheduleReminder = (options) => {
  const { title, message, date, onPress, id = Date.now().toString() } = options;
  
  console.log(`üì¢ Rappel programm√©: ${id} - ${title}`);
  
  // Si la date est dans le pass√©, on ignore
  if (date < new Date()) {
    console.log(`‚è∞ Date dans le pass√©, rappel ignor√©: ${date}`);
    return id;
  }
  
  // Calcul du d√©lai en millisecondes
  const delay = date.getTime() - Date.now();
  console.log(`‚è∞ Rappel programm√© dans: ${delay}ms`);
  
  // Supprimer tout rappel existant avec le m√™me ID
  cancelReminder(id);
  
  // Programmer un nouveau rappel
  const timerId = setTimeout(() => {
    // Vibrer pour attirer l'attention (si disponible)
    if (Platform.OS === 'android') {
      Vibration.vibrate([0, 500, 200, 500]);
    }
    
    // Afficher une alerte
    Alert.alert(
      `üì¢ ${title}`,
      message,
      [
        { 
          text: 'OK',
          onPress: onPress || (() => console.log(`Rappel ${id} confirm√©`))
        }
      ],
      { cancelable: false }
    );
    
    // Supprimer du cache
    reminderCache.delete(id);
    
    console.log(`üì¢ Rappel affich√©: ${id} - ${title}`);
  }, delay);
  
  // Stocker le rappel dans le cache
  reminderCache.add(id);
  
  return id;
};

/**
 * Annuler un rappel programm√©
 * 
 * @param {string} id Identifiant du rappel √† annuler
 */
export const cancelReminder = (id) => {
  if (reminderCache.has(id)) {
    console.log(`‚ùå Rappel annul√©: ${id}`);
    clearTimeout(id);
    reminderCache.delete(id);
  }
};

/**
 * Annuler tous les rappels programm√©s
 */
export const cancelAllReminders = () => {
  console.log(`‚ùå Tous les rappels annul√©s (${reminderCache.size})`);
  reminderCache.forEach(id => clearTimeout(id));
  reminderCache.clear();
};

/**
 * Afficher imm√©diatement un rappel (sans d√©lai)
 * 
 * @param {Object} options Options du rappel
 * @param {string} options.title Titre du rappel
 * @param {string} options.message Message du rappel
 * @param {Function} options.onPress Fonction √† appeler quand l'utilisateur appuie sur le rappel 
 */
export const showReminder = (options) => {
  const { title, message, onPress } = options;
  
  console.log(`üì¢ Affichage imm√©diat d'un rappel: ${title}`);
  
  // Vibrer pour attirer l'attention (si disponible)
  if (Platform.OS === 'android') {
    Vibration.vibrate([0, 500, 200, 500]);
  }
  
  // Afficher une alerte
  Alert.alert(
    `üì¢ ${title}`,
    message,
    [
      { 
        text: 'OK',
        onPress: onPress || (() => console.log(`Rappel confirm√©`))
      }
    ],
    { cancelable: false }
  );
};

export default {
  scheduleReminder,
  cancelReminder,
  cancelAllReminders,
  showReminder
};
